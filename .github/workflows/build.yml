name: CI/CD
on:
  push:
    branches:
      - main
      - dev
      - master
  pull_request:
    types: [opened, synchronize, reopened]
env:
  ECR_REPOSITORY_PREFIX: ${{ secrets.ECR_REPOSITORY_PREFIX }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_PREFIX }}-${{ secrets.APP_NAME }}
  IMAGE_TAG: ${{ github.sha }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  PROJECT_ROOT: Evaluation
jobs:
  sonar_maven_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Maven and Sonar
        run: |
          cd ./$PROJECT_ROOT
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # ---[ Configuring AWS credentials and Logging in to ECR ]---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build the image
        id: docker_build
        run: |
          cd ./$PROJECT_ROOT 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  deploy: 
    # ---[ Use docker image from the build step and deploy on EKS ]---
    needs: [sonar_maven_build]
    name: Deploy on EKS
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EKS
        run: |
          aws configure set aws_access_key_id ${{ secrets.EKS_ACCESS_KEY_ID }} --profile p3
          aws configure set aws_secret_access_key ${{ secrets.EKS_SECRET_ACCESS_KEY }} --profile p3
          aws configure set default.region ${{ secrets.AWS_REGION }} --profile p3
          aws eks --region us-east-1 update-kubeconfig --profile p3 --name $ECR_REPOSITORY_PREFIX 
          kubectl --namespace default set image deploy/${{secrets.APP_NAME}}-service-deployment ${{secrets.APP_NAME}}-service=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl --namespace default rollout status deploy/${{secrets.APP_NAME}}-service-deployment
